package inventory.modelPage;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import inventory.categoryPage.*;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Kind
 */
public class ModelChange extends inventory.myClasses.MyJPanel {

    /**
     * Creates new form ModelChange
     */
    public ModelChange() {
        super();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new inventory.myClasses.MyButton();
        modelNameLabel = new javax.swing.JLabel();
        contactLabel = new javax.swing.JLabel();
        modelNameTextField = new inventory.myClasses.MyTextField();
        contactScrollPane = new javax.swing.JScrollPane();
        contactTextPane = new inventory.myClasses.MyTextPane();
        changeButton = new inventory.myClasses.MyButton();

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        modelNameLabel.setText("Model Name");

        contactLabel.setText("Model Contact");

        contactTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                contactTextPaneKeyTyped(evt);
            }
        });
        contactScrollPane.setViewportView(contactTextPane);

        changeButton.setText("Change");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modelNameLabel)
                            .addComponent(contactLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(contactScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(modelNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(changeButton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelNameLabel)
                    .addComponent(modelNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contactScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contactLabel))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeButton)
                    .addComponent(backButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        ((inventory.modelPage.ModelManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("ModelManage"))).loadDataByName("");
        if(javax.swing.SwingUtilities.getWindowAncestor(this) !=null && javax.swing.SwingUtilities.getWindowAncestor(this) instanceof javax.swing.JFrame){
           ((inventory.core.ShowingFrame)javax.swing.SwingUtilities.getWindowAncestor(this)).dispose();
        }
        //inventory.core.ProjectBOMStockMain.setPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("ModelManage"));    
    }//GEN-LAST:event_backButtonActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
        boolean saved = false;
        
        if(this.changeButton.getText().equals("Register")){
            saved = registerDataEvent(evt);
        }else if(this.changeButton.getText().equals("Edit")){
            saved = editDataEvent(evt);
        }
        
        if(saved){
            ((inventory.modelPage.ModelManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("ModelManage"))).loadDataByName("");
            ((inventory.modelPage.ModelManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("ModelManage"))).findAndSetSelectedItem(this.modelNameTextField.getText());
            if(this.changeButton.getText().equals("Register")){
                this.clear();
            }
            goToOriginalPage();
        }
    }//GEN-LAST:event_changeButtonActionPerformed

    private void contactTextPaneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactTextPaneKeyTyped
        // TODO add your handling code here:
        typingInt(evt);
    }//GEN-LAST:event_contactTextPaneKeyTyped
    
    private void typingInt(java.awt.event.KeyEvent evt){
        char c = evt.getKeyChar();
  
        if (!Character.isDigit(c)) {
            evt.consume();
            return;
        }
    }
    
    private void goToOriginalPage(){
        if(JOptionPane.showConfirmDialog(this, "save done! Now, page will go to \"Category Manager\".","Confirm",JOptionPane.OK_CANCEL_OPTION) == 0){
            if(javax.swing.SwingUtilities.getWindowAncestor(this) !=null && javax.swing.SwingUtilities.getWindowAncestor(this) instanceof javax.swing.JFrame){
                ((inventory.core.ShowingFrame)javax.swing.SwingUtilities.getWindowAncestor(this)).dispose();
            }
        }
    }
    
    private boolean registerDataEvent(java.awt.event.ActionEvent evt){
        boolean saved = false;
                
        try {
            // TODO add your handling code here:
            //System.out.println(this.categoryNameTextField.getText());
            if(!this.modelNameTextField.getText().trim().equals("")){
                if(!inventory.core.DBConnection.excuteQuery("SELECT * FROM inventory.model WHERE name = '"+this.modelNameTextField.getText()+"';").next()){
                    int dialogResult = JOptionPane.showConfirmDialog (this, "Would You Like to Save?","Warning",JOptionPane.YES_NO_OPTION);
                    if(dialogResult == JOptionPane.YES_OPTION){
                        if(!this.contactTextPane.getText().trim().equals("")){
                            inventory.core.DBConnection.updateQuery("INSERT INTO `inventory`.`model` (`name`, `contact`) VALUES ('"+this.modelNameTextField.getText()+"', '"+this.contactTextPane.getText()+"');");
                        }else{
                            inventory.core.DBConnection.updateQuery("INSERT INTO `inventory`.`model` (`name`) VALUES ('"+this.modelNameTextField.getText()+"');");
                        }
                        
                        saved = true;
                    }
                }else{
                    JOptionPane.showConfirmDialog(this, "Name is duplicated","Warning",JOptionPane.OK_CANCEL_OPTION);
                    /*
                     already has name
                     */
                }
            }else{
                /*
                 * category name is empty
                 */
                JOptionPane.showConfirmDialog(this, "Category Name is Empty","Warning",JOptionPane.OK_CANCEL_OPTION);
                //System.out.println("Category Name is Empty");
            }
            //System.out.println(this.descriptionTextPane.getText());
        } catch (SQLException ex) {
            Logger.getLogger(ModelChange.class.getName()).log(Level.SEVERE, null, ex);
        }
        return saved;
    }
    
    private boolean editDataEvent(java.awt.event.ActionEvent evt){
        boolean saved = false;
                
        try {
            // TODO add your handling code here:
            //System.out.println(this.categoryNameTextField.getText());
            if(!this.modelNameTextField.getText().trim().equals("")){
                int dialogResult = JOptionPane.showConfirmDialog (this, "Would You Like to Save?","Warning",JOptionPane.YES_NO_OPTION);
                if(dialogResult == JOptionPane.YES_OPTION){
                    if(this.name.equals(this.modelNameTextField.getText())){
                        if(!this.contactTextPane.getText().trim().equals("")){
                            inventory.core.DBConnection.updateQuery("UPDATE `inventory`.`model` SET `contact`='"+(this.contactTextPane.getText())+"' WHERE `id`='"+this.id+"';");
                        }else{
                            inventory.core.DBConnection.updateQuery("UPDATE `inventory`.`model` SET `contact`='0' WHERE `id`='"+this.id+"';");
                        }
                        saved = true;
                    }else{
                        ResultSet rs = inventory.core.DBConnection.excuteQuery("SELECT name FROM inventory.model where name = '"+this.modelNameTextField.getText()+"';");
                        if(!rs.next()){
                            if(!this.contactTextPane.getText().trim().equals("")){
                                inventory.core.DBConnection.updateQuery("UPDATE `inventory`.`model` SET `name`='"+this.modelNameTextField.getText()+"', `contact`='"+(this.contactTextPane.getText())+"' WHERE `id`='"+this.id+"';");
                            }else{
                                inventory.core.DBConnection.updateQuery("UPDATE `inventory`.`model` SET `name`='"+this.modelNameTextField.getText()+"', `contact`='0' WHERE `id`='"+this.id+"';");
                            }
                            saved = true;
                        }else{
                            JOptionPane.showConfirmDialog(this, "Name is duplicated","Warning",JOptionPane.OK_CANCEL_OPTION);
                        }
                    }
                    
                    return saved;
                }
            }else{
                /*
                * category name is empty
                */
                JOptionPane.showConfirmDialog(this, "Nation Name is Empty","Warning",JOptionPane.OK_CANCEL_OPTION);
                //System.out.println("Category Name is Empty");
            }
            //System.out.println(this.descriptionTextPane.getText());
        } catch (Exception ex) {
            
        }
        
        return saved;
    }
    
    Integer id = null;
    String name = null;
    Integer contact = null;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    protected javax.swing.JButton changeButton;
    private javax.swing.JLabel contactLabel;
    protected javax.swing.JScrollPane contactScrollPane;
    protected javax.swing.JTextPane contactTextPane;
    private javax.swing.JLabel modelNameLabel;
    protected javax.swing.JTextField modelNameTextField;
    // End of variables declaration//GEN-END:variables

    public void setChangeConfig(Integer id, String name, Integer contact, String mode) {
        this.id = id;
        this.name = name;
        this.contact = contact;
        this.modelNameTextField.setText(name);
        this.contactTextPane.setText(contact==null || contact == 0 ? "" : contact.toString());
        this.changeButton.setText(mode);
    }
    
    public void showMode(boolean show){
        show = !show;
        this.modelNameTextField.setEnabled(show);
        this.contactTextPane.setEditable(show);
        this.backButton.setVisible(show);
        this.changeButton.setVisible(show);
    }
    
    private void clear(){
        this.modelNameTextField.setText("");
        this.contactTextPane.setText("");
        this.id = 0;
        this.name = "";
        this.contact = null;
    }

    @Override
    protected void myInitComponents() {
        this.initComponents();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void LoadData() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setComponetsColor(Color transparent) {
        this.backButton.setBackground(transparent);
        this.changeButton.setBackground(transparent);
        this.contactScrollPane.setBackground(transparent);
        this.contactTextPane.setBackground(transparent);
        this.modelNameTextField.setBackground(transparent);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
