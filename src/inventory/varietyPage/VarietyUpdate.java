/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.varietyPage;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author paul
 */
public class VarietyUpdate extends inventory.myClasses.MyJPanel {
    private Integer id = null;
    private Integer category_id = null;    
    private String original_Name = null;
    
    private ArrayList<String> possibilities = null;
    private ArrayList<Integer> ids = null;
    
    /**
     * Creates new form VarietyUpdate
     */
    public VarietyUpdate() {
        super();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        categoryNameLabel = new javax.swing.JLabel();
        cateogrynameTextField = new inventory.myClasses.MyTextField();
        varietyNameLabel = new javax.swing.JLabel();
        vatieryNameTextField = new inventory.myClasses.MyTextField();
        backButton = new inventory.myClasses.MyButton();
        updateButton = new inventory.myClasses.MyButton();
        categoryButton = new inventory.myClasses.MyButton();
        varietyNumberLabel = new javax.swing.JLabel();
        varietyNumberTextField = new javax.swing.JTextField();

        categoryNameLabel.setText("Category Name");

        cateogrynameTextField.setEnabled(false);

        varietyNameLabel.setText("Variety Name");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        categoryButton.setText("Category");
        categoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryButtonActionPerformed(evt);
            }
        });

        varietyNumberLabel.setText("Variety Number");

        varietyNumberTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                varietyNumberTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cateogrynameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(categoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(varietyNameLabel)
                    .addComponent(categoryNameLabel)
                    .addComponent(varietyNumberLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(varietyNumberTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vatieryNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(categoryNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(categoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cateogrynameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varietyNumberLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(varietyNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(varietyNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vatieryNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateButton))
                        .addGap(0, 45, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void categoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryButtonActionPerformed
        // TODO add your handling code here:
        String s = selectDialog("Category Select", "Please Check a Category","SELECT * FROM inventory.category where disable_id = 1 ORDER BY name;","name");
        if ((s != null) && (s.length() > 0)) {
            this.category_id = ids.get(possibilities.indexOf(s));
            this.cateogrynameTextField.setText(s);
            return;
        }
    }//GEN-LAST:event_categoryButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        closeProcess();
    }//GEN-LAST:event_backButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if(id == 0){
            if(this.registerValidate()){
                JOptionPane.showConfirmDialog(null, "Register Success.","Notice",JOptionPane.OK_OPTION);
                Integer option = JOptionPane.showConfirmDialog(null, "Do you want to continue this process?","Alert",JOptionPane.OK_CANCEL_OPTION);
                if(option == JOptionPane.OK_OPTION){
                    this.clearElements();
                }else{
                    this.closeProcess();
                }
            }else{
                JOptionPane.showMessageDialog(null, "Register Faild.","Warning",JOptionPane.OK_OPTION);
            }
        }else{
            if(this.editValidate()){
                JOptionPane.showConfirmDialog(null, "Edit Success.","Notice",JOptionPane.OK_OPTION);
                ((inventory.varietyPage.VarietyManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("VarietyManage"))).LoadData();
                Integer option = JOptionPane.showConfirmDialog(null, "Do you want to continue this process?","Alert",JOptionPane.OK_CANCEL_OPTION);
                if(option == JOptionPane.OK_OPTION){
                    //this.clearElements();
                }else{
                    this.closeProcess();
                }
            }else{
                JOptionPane.showMessageDialog(null, "Edit Faild.","Warning",JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void varietyNumberTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_varietyNumberTextFieldKeyTyped
        // TODO add your handling code here:
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_varietyNumberTextFieldKeyTyped

    private void closeProcess(){
        if(javax.swing.SwingUtilities.getWindowAncestor(this) !=null && javax.swing.SwingUtilities.getWindowAncestor(this) instanceof javax.swing.JFrame){
            if(id != null && id != 0){
                ((inventory.varietyPage.VarietyManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("VarietyManage"))).LoadData();
                ((inventory.varietyPage.VarietyManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("VarietyManage"))).setSelectedVariety(this.category_id, this.id);
            }
            ((inventory.core.ShowingFrame)javax.swing.SwingUtilities.getWindowAncestor(this)).dispose();
        }
    }
    
    private boolean editValidate(){
        boolean validation = false;
            
        try {
            if(id == 0){
                return validation;
            }
            
            if(this.category_id == null || this.category_id == 0){
                JOptionPane.showMessageDialog(null, "Category is Empty","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            if(this.vatieryNameTextField.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Variety Name is Empty","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            if(this.varietyNumberTextField.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Variety Number is Empty","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            String sql = null;
            
            ResultSet rs = null;
            /// name check
            if(!this.vatieryNameTextField.getText().equals(this.original_Name)){
                sql = "SELECT * FROM inventory.variety where name = '"+this.vatieryNameTextField.getText()+"'  and disable_id = 1;";
                
                rs = inventory.core.DBConnection.executeQuery(sql);

                if(rs.next()){
                    JOptionPane.showMessageDialog(null, "Variety Name is Duplicated","Warning",JOptionPane.OK_OPTION);
                    return validation;
                }
            }
            System.out.println();
            ///
            String updateSql = null;
            
            updateSql = "UPDATE `inventory`.`variety` SET `category_id`="+this.category_id+", `name`='"+this.vatieryNameTextField.getText()+"', `varietyNumber`='"+this.varietyNumberTextField.getText()+"' WHERE `id`="+this.id+";";
            
            inventory.core.DBConnection.updateQuery(updateSql);
            
            validation = true;
        } catch (SQLException ex) {
            Logger.getLogger(VarietyUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
        return validation;
    }
    
    private boolean registerValidate(){
        boolean validation = false;
            
        try {
            if(id != 0){
                return validation;
            }
            
            if(this.category_id == null || this.category_id == 0){
                JOptionPane.showMessageDialog(null, "Category is Empty","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            if(this.vatieryNameTextField.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Variety Name is Empty","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            if(this.varietyNumberTextField.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Variety Number is Empty","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            String sql = null;
            
            sql = "SELECT * FROM inventory.variety where name = '"+this.vatieryNameTextField.getText()+"'  and disable_id = 1;";
            
            ResultSet rs = inventory.core.DBConnection.executeQuery(sql);
            
            if(rs.next()){
                JOptionPane.showMessageDialog(null, "Variety Name is Duplicated","Warning",JOptionPane.OK_OPTION);
                return validation;
            }
            
            String updateSql = null;
            
            updateSql = "INSERT INTO `inventory`.`variety` (`category_id`, `name`, `register_id`, `varietyNumber`) VALUES ("+this.category_id+", '"+this.vatieryNameTextField.getText()+"', "+inventory.core.MainFrame.user_id+", '"+this.varietyNumberTextField.getText()+"');";
            
            rs = inventory.core.DBConnection.updateQueryGetID(updateSql);
            
            if(rs!=null && rs.next()){
                this.id = rs.getInt(1);
            }
            
            validation = true;
        } catch (SQLException ex) {
            Logger.getLogger(VarietyUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
        return validation;
    }
    
    private String selectDialog(String Title, String Message, String sql, String possibleTarget){
        try {
            ResultSet rs = inventory.core.DBConnection.executeQuery(sql);
            
            possibilities = new ArrayList<String>();
            ids = new ArrayList<Integer>();
            
            if(rs != null){
                while(rs.next()){
                    possibilities.add(rs.getString(possibleTarget));
                    ids.add(rs.getInt("id"));
                }
            }
            String s = (String)JOptionPane.showInputDialog(
                                null,
                                Message,
                                Title,
                                JOptionPane.PLAIN_MESSAGE,
                                null,
                                possibilities.toArray(),
                                null);
            
            return s;
        } catch (SQLException ex) {
            Logger.getLogger(VarietyUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton categoryButton;
    private javax.swing.JLabel categoryNameLabel;
    private javax.swing.JTextField cateogrynameTextField;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel varietyNameLabel;
    private javax.swing.JLabel varietyNumberLabel;
    private javax.swing.JTextField varietyNumberTextField;
    private javax.swing.JTextField vatieryNameTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void myInitComponents() {
        this.initComponents();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void LoadData() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setComponetsColor(Color transparent) {
        this.updateButton.setBackground(transparent);
        this.categoryButton.setBackground(transparent);
        this.backButton.setBackground(transparent);
        this.cateogrynameTextField.setBackground(transparent);
        this.vatieryNameTextField.setBackground(transparent);
        //        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void setElements(Integer id, String categoryName, Integer category_id){
        //set this values
        this.id = id;
        
        if(id == 0){
            this.clearElements();
            this.updateButton.setText("Register");
            this.category_id = category_id;
            this.cateogrynameTextField.setText(categoryName);
        }else if(id > 0){
            this.updateButton.setText("Edit");
            try {
                ResultSet rs = inventory.core.DBConnection.executeQuery("SELECT * FROM inventory.variety WHERE id = "+id+";");
                if(rs.next()){
                    this.category_id = rs.getInt("category_id");
                    
                    possibilities = null;
                    
                    this.varietyNumberTextField.setText(rs.getString("varietyNumber"));
                    this.cateogrynameTextField.setText(categoryName);
                    this.vatieryNameTextField.setText(rs.getString("name"));
                    this.original_Name = this.vatieryNameTextField.getText();
                }else{
                    this.clearElements();
                    ((inventory.itemPage.ItemManage)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("ItemManage"))).loadDataByName("");
                    inventory.core.ProjectBOMStockMain.setPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("ItemManage"));
                    return;
                }
            } catch (SQLException ex) {
                Logger.getLogger(VarietyUpdate.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clearElements() {
        this.id = 0;
        this.category_id = null;
        this.cateogrynameTextField.setText("");
        this.vatieryNameTextField.setText("");
        //        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
