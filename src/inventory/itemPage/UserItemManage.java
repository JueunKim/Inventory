/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.itemPage;
 
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Liz
 */
public class UserItemManage extends javax.swing.JPanel {
    private ArrayList<String> categoryArrayList;
    private ArrayList<String> nameArrayList;
    private ArrayList<String> codeArrayList;
    private static ArrayList<Integer> currentArrayList;
    
    private String order_by ="cname";
    private String order ="ASC";
    
    private String searchSubject = "variety.name";
    private ArrayList<Integer> idArrayList;
    /**
     * Creates new form UserItemManage
     */
    public UserItemManage() {
        initComponents();
        loadData();
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameScrollPane = new javax.swing.JScrollPane();
        nameList = new javax.swing.JList();
        remainScrollPane = new javax.swing.JScrollPane();
        remainlList = new javax.swing.JList();
        nameLabel = new javax.swing.JLabel();
        remainLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        searchByNameLabel = new javax.swing.JLabel();
        searchByNameTextField = new inventory.myClasses.MyTextField();
        categoryScrollPane = new javax.swing.JScrollPane();
        categoryList = new inventory.myClasses.MyList();
        categoryLabel = new javax.swing.JLabel();
        deductButton = new inventory.myClasses.MyButton();
        searchByCodeTextField = new inventory.myClasses.MyTextField();
        searchNameLabel = new javax.swing.JLabel();
        codeScrollPane = new javax.swing.JScrollPane();
        codeList = new inventory.myClasses.MyList();
        codeLabel = new javax.swing.JLabel();

        nameScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        nameScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        nameScrollPane.setAutoscrolls(true);

        nameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        nameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameListMouseClicked(evt);
            }
        });
        nameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                nameListValueChanged(evt);
            }
        });
        nameList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameListKeyTyped(evt);
            }
        });
        nameScrollPane.setViewportView(nameList);

        remainScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        remainScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        remainlList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        remainlList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remainlListMouseClicked(evt);
            }
        });
        remainlList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                remainlListValueChanged(evt);
            }
        });
        remainlList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                remainlListKeyTyped(evt);
            }
        });
        remainScrollPane.setViewportView(remainlList);

        nameLabel.setText("Name List");
        nameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameLabelMouseClicked(evt);
            }
        });

        remainLabel.setText("Remain");
        remainLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remainLabelMouseClicked(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        backButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                backButtonKeyTyped(evt);
            }
        });

        searchByNameLabel.setText("Search Name");

        searchByNameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchByNameTextFieldMouseClicked(evt);
            }
        });
        searchByNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameTextFieldActionPerformed(evt);
            }
        });
        searchByNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchByNameTextFieldKeyReleased(evt);
            }
        });

        categoryScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        categoryScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        categoryList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        categoryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryListMouseClicked(evt);
            }
        });
        categoryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryListValueChanged(evt);
            }
        });
        categoryList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                categoryListKeyTyped(evt);
            }
        });
        categoryScrollPane.setViewportView(categoryList);

        categoryLabel.setText("Category");
        categoryLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryLabelMouseClicked(evt);
            }
        });

        deductButton.setText("Add Item");
        deductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deductButtonActionPerformed(evt);
            }
        });

        searchByCodeTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchByCodeTextFieldMouseClicked(evt);
            }
        });
        searchByCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchByCodeTextFieldKeyReleased(evt);
            }
        });

        searchNameLabel.setText("Search Code");

        codeScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        codeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        codeList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        codeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                codeListMouseClicked(evt);
            }
        });
        codeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                codeListValueChanged(evt);
            }
        });
        codeList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                codeListKeyTyped(evt);
            }
        });
        codeScrollPane.setViewportView(codeList);

        codeLabel.setText("Code");
        codeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                codeLabelMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(categoryLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(nameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(categoryScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(nameScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(codeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(codeScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(remainLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(remainScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(backButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .add(deductButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(110, 110, 110)
                                .add(searchByNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(118, 118, 118)
                                .add(searchByNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(33, 33, 33)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(searchByCodeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(searchNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(searchByNameLabel)
                            .add(searchNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(searchByNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(searchByCodeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(categoryLabel)
                            .add(nameLabel)
                            .add(codeLabel)
                            .add(remainLabel))
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(remainScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 510, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(codeScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 510, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(68, 68, 68)
                                .add(deductButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(34, 34, 34))
                            .add(nameScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 510, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(categoryScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 510, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loadData(){
        this.categoryArrayList = new ArrayList<>();
        this.nameArrayList = new ArrayList<>();
        this.codeArrayList = new ArrayList<>();
        this.currentArrayList = new ArrayList<>();
        this.idArrayList = new ArrayList<>();

        String sql = "SELECT item.id, category.name as cname, variety.name as vname, CONCAT(category.code, LPAD(variety.varietyNumber,2,'0'), LPAD(item.itemNumber,3,'0')) as wcode,item.current "
                + "FROM inventory.item as item "
                + "JOIN inventory.category "
                + "JOIN inventory.variety "
                + "ON inventory.item.category_id = inventory.category.id and item.variety_id = variety.id and variety.disable_id = 1 "
                + "WHERE item.disable_id = 1;";
         try{
            ResultSet rs = inventory.core.DBConnection.executeQuery(sql);
            
            while(rs.next()){
                this.categoryArrayList.add(rs.getString("cname"));
                this.nameArrayList.add(rs.getString("vname"));
                this.codeArrayList.add(rs.getString("wcode"));
                this.idArrayList.add(rs.getInt("id"));
                UserItemManage.currentArrayList.add(rs.getInt("current"));
            }
            
        }catch(SQLException ex){
            Logger.getLogger(UserItemManage.class.getName()).log(Level.SEVERE, null, ex);
        }
          this.categoryScrollPane.getVerticalScrollBar().setModel(this.nameScrollPane.getVerticalScrollBar().getModel());
          this.codeScrollPane.getVerticalScrollBar().setModel(this.nameScrollPane.getVerticalScrollBar().getModel());
          this.remainScrollPane.getVerticalScrollBar().setModel(this.nameScrollPane.getVerticalScrollBar().getModel());
          
          this.categoryList.setListData(this.categoryArrayList.toArray());
          this.nameList.setListData(this.nameArrayList.toArray());
          this.codeList.setListData(this.codeArrayList.toArray());
          this.remainlList.setListData(currentArrayList.toArray());

    }
   
    public void loadDataByName(String name){
        this.categoryArrayList = new ArrayList<>();
        this.nameArrayList = new ArrayList<>();
        this.codeArrayList = new ArrayList<>();
        this.currentArrayList = new ArrayList<>();
        this.idArrayList = new ArrayList<>();
        
       try{
           String sql = "SELECT item.id, category.name as cname, variety.name as vname, CONCAT(category.code, LPAD(variety.varietyNumber,2,'0'), LPAD(item.itemNumber,3,'0')) as wcode,item.current "
                   + "FROM inventory.item "
                   + "JOIN inventory.category "
                   + "JOIN inventory.variety "
                   + "ON inventory.item.category_id = inventory.category.id "
                   + "AND item.variety_id = variety.id and variety.disable_id = 1 "
                   + "WHERE item.disable_id = 1 "
                   + "AND "+this.searchSubject+" like '%"+name+"%' order by "+order_by+" "+order+";" ;
           
       
           if(sql.toString().contains("null")){
             sql = "SELECT item.id, category.name as cname,variety.name as vname, CONCAT(category.code, LPAD(variety.varietyNumber,2,'0'), LPAD(item.itemNumber,3,'0')) as wcode,item.current "
                     + "FROM inventory.item "
                     + "JOIN inventory.category "
                     + "JOIN inventory.variety "
                     + "ON inventory.item.category_id = inventory.category.id "
                     + "AND item.variety_id = variety.id and variety.disable_id = 1 "
                     + "WHERE item.disable_id = 1";
        }
        
        ResultSet rs = inventory.core.DBConnection.executeQuery(sql); 
       
        if(rs != null){
            while(rs.next()){
                this.categoryArrayList.add(rs.getString("cname"));
                this.nameArrayList.add(rs.getString("vname"));
                this.codeArrayList.add(rs.getString("wcode"));
                this.idArrayList.add(rs.getInt("id"));
                UserItemManage.currentArrayList.add(rs.getInt("current"));
            }
        }
       }catch(SQLException ex){
           Logger.getLogger(UserItemManage.class.getName()).log(Level.SEVERE, null, ex);
       } 
       this.categoryScrollPane.getVerticalScrollBar().setModel(this.nameScrollPane.getVerticalScrollBar().getModel());
       this.codeScrollPane.getVerticalScrollBar().setModel(this.nameScrollPane.getVerticalScrollBar().getModel());
       this.remainScrollPane.getVerticalScrollBar().setModel(this.nameScrollPane.getVerticalScrollBar().getModel());
        
       this.categoryList.setListData(this.categoryArrayList.toArray());
       this.nameList.setListData(this.nameArrayList.toArray());
       this.codeList.setListData(this.codeArrayList.toArray());
       this.remainlList.setListData(currentArrayList.toArray());
       
    }
    
    private void codeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_codeLabelMouseClicked
        // TODO add your handling code here:
 
    }//GEN-LAST:event_codeLabelMouseClicked

    private void codeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_codeListValueChanged
        // TODO add your handling code here:
          if(evt.getSource() instanceof javax.swing.JList)
        this.listChanged(((javax.swing.JList)evt.getSource()).getSelectedIndex());
    }//GEN-LAST:event_codeListValueChanged

    private void codeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_codeListMouseClicked
        // TODO add your handling code here:
      
    }//GEN-LAST:event_codeListMouseClicked

    private void searchByCodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByCodeTextFieldKeyReleased
        // TODO add your handling code here:
        this.searchSubject = "CONCAT(category.code, LPAD(variety.varietyNumber,2,'0'), LPAD(item.itemNumber,3,'0'))";
        this.loadDataByName(this.searchByCodeTextField.getText());
        
    }//GEN-LAST:event_searchByCodeTextFieldKeyReleased

    private void deductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deductButtonActionPerformed
        // TODO add your handling code here:
        this.addItemProcess();
    }//GEN-LAST:event_deductButtonActionPerformed

    private void addItemProcess(){
          if(this.nameList.getSelectedIndex() >= 0){
            inventory.itemPage.UserItemUpdate uip = ((inventory.itemPage.UserItemUpdate)inventory.core.ProjectBOMStockMain.getPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("UserItemUpdate")));
//            uip.setElements(this.idArrayList.get(this.nameList.getSelectedIndex()));
            uip.setElements(this.idArrayList.get(this.codeList.getSelectedIndex()));
          }
          
            
        inventory.core.ProjectBOMStockMain.getMainFrame().setVisible(true);
        inventory.core.ProjectBOMStockMain.getMainFrame().setEnabled(true);
        
        inventory.core.ProjectBOMStockMain.display.setVisible(true);
        inventory.core.ProjectBOMStockMain.display.setEnabled(true);
        inventory.core.ProjectBOMStockMain.display.setBounds(800, 100, inventory.core.ProjectBOMStockMain.display.getWidth(), inventory.core.ProjectBOMStockMain.display.getHeight());

    }
    
    private void categoryLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryLabelMouseClicked
        // TODO add your handling code here:
  
    }//GEN-LAST:event_categoryLabelMouseClicked

    private void categoryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryListValueChanged
        // TODO add your handling code here:
          if(evt.getSource() instanceof javax.swing.JList)
        this.listChanged(((javax.swing.JList)evt.getSource()).getSelectedIndex());
  
    }//GEN-LAST:event_categoryListValueChanged

    private void categoryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryListMouseClicked
        // TODO add your handling code here:
   
    }//GEN-LAST:event_categoryListMouseClicked

    private void searchByNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByNameTextFieldKeyReleased
        // TODO add your handling code here:
        this.searchSubject = "variety.name";
        this.loadDataByName(this.searchByNameTextField.getText());

    }//GEN-LAST:event_searchByNameTextFieldKeyReleased

    private void backButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backButtonKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar()=='\n'){
            this.backButtonActionPerformed(null);
        }
    }//GEN-LAST:event_backButtonKeyTyped

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
             if(inventory.core.MainFrame.role == 1){
            inventory.core.ProjectBOMStockMain.setPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("AdminMain"));
        }else{
             if(JOptionPane.showConfirmDialog(this, "Log Out!!! Are you sure? ","Confirm",JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION)
               inventory.core.ProjectBOMStockMain.setPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("Login"));
            
        }
        if(inventory.core.ProjectBOMStockMain.display != null){
            inventory.core.ProjectBOMStockMain.display.dispose();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void remainLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remainLabelMouseClicked
        // TODO add your handling code here:
    
    }//GEN-LAST:event_remainLabelMouseClicked

    private void nameLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameLabelMouseClicked
        // TODO add your handling code here:
      
    }//GEN-LAST:event_nameLabelMouseClicked

    private void remainlListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_remainlListValueChanged
        // TODO add your handling code here:
        if(evt.getSource() instanceof javax.swing.JList)
        this.listChanged(((javax.swing.JList)evt.getSource()).getSelectedIndex());
    }//GEN-LAST:event_remainlListValueChanged

    private void remainlListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remainlListMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_remainlListMouseClicked

    private void nameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_nameListValueChanged
        // TODO add your handling code here:
          if(evt.getSource() instanceof javax.swing.JList)
        this.listChanged(((javax.swing.JList)evt.getSource()).getSelectedIndex());
    }//GEN-LAST:event_nameListValueChanged

    private void nameListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_nameListMouseClicked

    private void searchByNameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchByNameTextFieldMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchByNameTextFieldMouseClicked

    private void searchByCodeTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchByCodeTextFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchByCodeTextFieldMouseClicked

    private void searchByNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchByNameTextFieldActionPerformed

    private void categoryListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_categoryListKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == '\n'){
            this.addItemProcess();  
        }
    }//GEN-LAST:event_categoryListKeyTyped

    private void nameListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameListKeyTyped
        // TODO add your handling code here:
          if(evt.getKeyChar() == '\n'){
            this.addItemProcess();
         }
    }//GEN-LAST:event_nameListKeyTyped

    private void codeListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeListKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == '\n'){
            this.addItemProcess();
         }
    }//GEN-LAST:event_codeListKeyTyped

    private void remainlListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remainlListKeyTyped
        // TODO add your handling code here:
        if(evt.getKeyChar() == '\n'){
            this.addItemProcess(); 
        }
    }//GEN-LAST:event_remainlListKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JList categoryList;
    private javax.swing.JScrollPane categoryScrollPane;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JList codeList;
    private javax.swing.JScrollPane codeScrollPane;
    private javax.swing.JButton deductButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JList nameList;
    private javax.swing.JScrollPane nameScrollPane;
    private javax.swing.JLabel remainLabel;
    private javax.swing.JScrollPane remainScrollPane;
    private javax.swing.JList remainlList;
    private javax.swing.JTextField searchByCodeTextField;
    private javax.swing.JLabel searchByNameLabel;
    private javax.swing.JTextField searchByNameTextField;
    private javax.swing.JLabel searchNameLabel;
    // End of variables declaration//GEN-END:variables

    private void listChanged(Integer index) {
         //To change body of generated methods, choose Tools | Templates.
         if(index < 0)
            return;
        this.categoryList.setSelectedIndex(index);
        this.nameList.setSelectedIndex(index);
        this.codeList.setSelectedIndex(index);
        this.remainlList.setSelectedIndex(index);
        
        this.categoryList.ensureIndexIsVisible(this.categoryList.getSelectedIndex());
        this.nameList.ensureIndexIsVisible(this.nameList.getSelectedIndex());
        this.codeList.ensureIndexIsVisible(this.codeList.getSelectedIndex());
        this.remainlList.ensureIndexIsVisible(this.remainlList.getSelectedIndex());
       
        this.updateUI();
    }
}
