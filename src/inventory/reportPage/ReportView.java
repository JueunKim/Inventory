/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory.reportPage;

import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.TableModel;
import jxl.*;
import jxl.write.*;
import jxl.write.biff.RowsExceededException;

// Variables declaration - do not modify                     
/**
 *
 * @author Liz
 */
public class ReportView extends javax.swing.JPanel {
    private Date fromDate = null;
    private Date toDate = null;
    private ArrayList<String> idArrayList;
    private ArrayList<Integer> priceList;

    /**
     * Creates new form ReportView
     */
    public ReportView() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        fromTextField = new javax.swing.JTextField();
        toTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        todayButton1 = new javax.swing.JButton();
        applyButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        totalLabel = new javax.swing.JLabel();
        patientTextField = new javax.swing.JTextField();
        patientLabel = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        printButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        exportExcelButton = new javax.swing.JButton();

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Register_Key", "Name", "Code", "Qty", "Price", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reportTable);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        dateLabel.setText("Date");

        fromTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fromTextFieldMouseClicked(evt);
            }
        });
        fromTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTextFieldActionPerformed(evt);
            }
        });

        toTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toTextFieldMouseClicked(evt);
            }
        });
        toTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("-");

        todayButton1.setText("Today");
        todayButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todayButton1ActionPerformed(evt);
            }
        });

        applyButton1.setText("Apply");
        applyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButton1ActionPerformed(evt);
            }
        });

        totalLabel.setText("Total Price");

        patientTextField.setEditable(false);
        patientTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientTextFieldActionPerformed(evt);
            }
        });

        patientLabel.setText("Number of Patient");

        totalTextField.setEditable(false);
        totalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTextFieldActionPerformed(evt);
            }
        });

        printButton.setText("Print");
        printButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printButtonMouseClicked(evt);
            }
        });

        exportExcelButton.setText("Export Excel");
        exportExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExcelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(dateLabel)
                        .add(28, 28, 28)
                        .add(fromTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(34, 34, 34)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(toTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 743, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, backButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, patientTextField)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator1)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, totalTextField)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(patientLabel)
                                .add(0, 18, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, todayButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, applyButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(printButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jSeparator4)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator5)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, exportExcelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .add(3, 3, 3)))
                        .add(12, 12, 12))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(totalLabel)
                        .add(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dateLabel)
                    .add(fromTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(toTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(applyButton1))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(todayButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(exportExcelButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(printButton)
                        .add(2, 2, 2)
                        .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(patientLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(patientTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(totalLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(totalTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
 
    private void setElements(Date fromDate, Date toDate) {
        this.reportTable = new javax.swing.JTable();
        this.idArrayList = new ArrayList<>();
        this.priceList = new ArrayList<>();
      
        javax.swing.table.DefaultTableModel dtm = new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "User", "Register_Key", "Name", "Code", "Qty", "Price", "Date"
        }
        ) {
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }

    };
        
        String sql = null;
            if (fromDate != null && toDate != null) 
              try { 
                   sql = "SELECT change.register_key as rkey,user.name as user,change.register_key as rkey,item.name as name,CONCAT(category.code, LPAD(variety.varietyNumber,2,'0'), LPAD(item.itemNumber,3,'0')) as wcode,change.amount as amount,item.price as price, change.date as date "
                        + "FROM inventory.change as `change` "
                        + "JOIN inventory.item as `item` JOIN inventory.category as `category` JOIN inventory.variety as variety JOIN inventory.user as `user`"
                        + "ON `user`.id = `change`.editor_id AND `change`.item_id = `item`.id AND `category`.id = `item`.category_id AND `item`.variety_id = variety.id "
                        + "WHERE change.changetype_id=2 and change.changetype_id=2 AND "
                        + "date >'" + this.fromDate + " 00:00:00'"+"and date <'" + this.toDate +" 23:59:59'" +" order by change.date;";
                      
                ResultSet rs = inventory.core.DBConnection.executeQuery(sql);
                
                if(rs != null){
               
                    while(rs.next()){
                        this.idArrayList.add(rs.getString("rkey"));
                        this.priceList.add(rs.getInt("price"));
                        dtm.addRow(new Object [] {rs.getString("user"), rs.getString("rkey"), rs.getString("name"),rs.getString("wcode"), rs.getInt("amount"), rs.getInt("price"), rs.getDate("date") });   
                }
            }
          }catch (SQLException ex) {
            Logger.getLogger(ReportView.class.getName()).log(Level.SEVERE, null, ex);
            }
   
        reportTable.setModel(dtm);
        dtm.addTableModelListener(reportTable);
        jScrollPane1.setViewportView(reportTable);

        HashSet hSet = new HashSet();   
        int sum = 0; 
        for (int i =0 ; i < this.idArrayList.size(); i++){
                hSet.add(this.idArrayList.get(i));              
                sum += this.priceList.get(i) ;
            }

        patientTextField.setText( hSet.size() +"   Patient ");
        totalTextField.setText( sum + "  MK");
    }
    
    private void fromTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromTextFieldActionPerformed

    private void toTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toTextFieldActionPerformed

    private void toTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toTextFieldMouseClicked
        // TODO add your handling code here:
        Date utilDate = null;
        if (this.toDate != null) {
            inventory.core.DateChooser dc = new inventory.core.DateChooser(new JDialog());
            utilDate = dc.select(this.toDate);
//            utilDate =  dc.select();
        } else {
            utilDate = new inventory.core.DateChooser(new JDialog()).select();
        }
        if (utilDate != null) {
            java.sql.Date date = new java.sql.Date(utilDate.getTime());
            if (date != null) {
                this.toDate = date;
            }
        }
 
        if (this.toDate != null) {
            this.toTextField.setText(this.toDate.toString());
            System.out.println(this.toDate.toString());

        }
    }//GEN-LAST:event_toTextFieldMouseClicked

    private void fromTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromTextFieldMouseClicked
        // TODO add your handling code here:
        Date utilDate = null;
        if (this.fromDate != null) {
            inventory.core.DateChooser dc = new inventory.core.DateChooser(new JDialog());
            utilDate = dc.select(this.fromDate);
//            utilDate =  dc.select();
        } else {
            utilDate = new inventory.core.DateChooser(new JDialog()).select();
        }
        if (utilDate != null) {
            java.sql.Date date = new java.sql.Date(utilDate.getTime());
            if (date != null) {
                this.fromDate = date;
            }
        }
        
        if (this.fromDate != null) {
            this.fromTextField.setText(this.fromDate.toString());
            System.out.println(this.fromDate.toString());
        }

    }//GEN-LAST:event_fromTextFieldMouseClicked

    private void applyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButton1ActionPerformed
        // TODO add your handling code here:      
       
        if (fromDate.getTime() - toDate.getTime() < 0) {
              setElements(fromDate, toDate);
        }
        else {
            JOptionPane.showMessageDialog(this, "Apply Fail ", "Warning", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_applyButton1ActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        if (inventory.core.ProjectBOMStockMain.display != null) {
            inventory.core.ProjectBOMStockMain.display.dispose();
        }
        inventory.core.ProjectBOMStockMain.setPage(inventory.core.ProjectBOMStockMain.PageList.indexOf("AdminMain"));
        clearElements();

    }//GEN-LAST:event_backButtonActionPerformed

    private void todayButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todayButton1ActionPerformed
        // TODO add your handling code here:
        Date toDate = new Date();

        if (toDate != null) {
            java.sql.Date date = new java.sql.Date(toDate.getTime());
            if (date != null) {
                this.fromDate = date;
            }
        }

        if (this.fromDate != null) {
            this.fromTextField.setText(this.fromDate.toString());
            this.toTextField.setText(this.fromDate.toString());
            System.out.println(this.fromDate.toString());
        }
            
        setElements(fromDate, fromDate);
    }//GEN-LAST:event_todayButton1ActionPerformed

    private void patientTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientTextFieldActionPerformed

    private void totalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTextFieldActionPerformed

    private void printButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printButtonMouseClicked
        // TODO add your handling code here:
    PrinterJob printJob = PrinterJob.getPrinterJob();
    printJob.setCopies(1);
    
    if (printJob.printDialog())
      try { 
        printJob.print();
      } catch(PrinterException pe) {
        System.out.println("Error printing: " + pe);
      }
    }//GEN-LAST:event_printButtonMouseClicked

    private void exportExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExcelButtonActionPerformed
        // TODO add your handling code here:
        try {
            
            String fileFilters [][] = {{".xls", "xls"}};
        
            javax.swing.JFileChooser jfc = new JFileChooser();

            jfc.removeChoosableFileFilter(jfc.getFileFilter());
            if(fileFilters != null){
                for(int i = 0; i < fileFilters.length; i++){
                    jfc.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(fileFilters[i][0],fileFilters[i][1]));
                }
            }

            jfc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
            jfc.showSaveDialog(jfc);
            
            if(jfc.getSelectedFile() != null){
                String path  = jfc.getSelectedFile().getPath();
                
                String extension = path.substring(path.lastIndexOf(".") + 1, path.length());
                
                if(!extension.equals("xls")){
                    path  = jfc.getSelectedFile().getPath() + jfc.getFileFilter().getDescription();
                }
                WritableWorkbook workbook = Workbook.createWorkbook(new File(path)); 
                WritableSheet sheet = workbook.createSheet("Report Sheet", 0); 
                
                TableModel model = this.reportTable.getModel();
                
                for (int i = 0; i < model.getColumnCount(); i++) {
                    Label column = new Label(i, 0, model.getColumnName(i));
                    sheet.addCell(column);
                }
                int j = 0;
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (j = 0; j < model.getColumnCount(); j++) {
                        Label row = new Label(j, i + 1, 
                                model.getValueAt(i, j).toString());
                        sheet.addCell(row);
                    }
                }
                workbook.write(); 
                workbook.close();
                
                JOptionPane.showMessageDialog(this, "Save Done!", "Success", JOptionPane.OK_OPTION);
            }else{
                JOptionPane.showMessageDialog(this, "Fail", "Fail", JOptionPane.OK_OPTION);
            }
            // TODO code application logic here
        } catch (IOException ex) {
            Logger.getLogger(ReportView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(ReportView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportExcelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton1;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton exportExcelButton;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel patientLabel;
    private javax.swing.JTextField patientTextField;
    private javax.swing.JButton printButton;
    private javax.swing.JTable reportTable;
    private javax.swing.JTextField toTextField;
    private javax.swing.JButton todayButton1;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField totalTextField;
    // End of variables declaration//GEN-END:variables

    private void clearElements() {
        fromDate = null;
        toDate = null;

        fromTextField.setText("");
        toTextField.setText("");
        totalTextField.setText("");
        patientTextField.setText("");
        
        this.setElements(fromDate, toDate);
    }
}
